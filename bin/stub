#!/usr/bin/env ruby
require 'pathname'
require 'yaml'

command = File.basename(__FILE__)
folder = File.dirname(__FILE__)

call_logs = Pathname.new(folder).join("#{command}_calls.yml")
call_logs.open('a') do |f|
  f.puts '- args:'
  ARGV.each { |arg| f.puts "  - #{arg.inspect}" }
  f.puts "  stdin: #{$stdin.read.inspect}" unless STDIN.tty?
end

def interpolate_filename(elements)
  return elements if elements.is_a? String
  return nil unless elements.is_a? Array

  elements.map do |element|
    case element
    when String then element
    when Symbol then interpolate_argument(element)
    end
  end.join
end

def interpolate_argument(name)
  return unless (data = /^arg(\d+)$/.match(name.to_s))
  ARGV[data[1].to_i - 1]
end

call_configurations = Pathname.new(folder).join("#{command}_stub.yml")
if call_configurations.exist?
  config = YAML.load call_configurations.read

  matching_calls = []
  config.each do |call_config|
    if !call_config[:args].empty?
      next unless (call_config[:args].eql? ARGV)
    end
    matching_calls << {
      config: call_config,
      specific: call_config[:args].length
    }
  end
  exit 0 if matching_calls.empty?

  call_config = matching_calls.sort do |a, b|
    b[:specific] <=> a[:specific]
  end.first[:config]
  (call_config[:outputs] || []).each do |data|
    $stdout.print data[:content] if data[:target] == :stdout
    $stderr.print data[:content] if data[:target] == :stderr

    output_filename = interpolate_filename(data[:target])
    next unless output_filename
    Pathname.new(output_filename).open('w') do |f|
      f.print data[:content]
    end
  end
  exit call_config[:statuscode] || 0
end
